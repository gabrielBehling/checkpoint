services:
  # ---- Bancos de Dados ----
  mssql:
    image: mcr.microsoft.com/mssql/server:2022-latest
    env_file: .env
    environment:
      ACCEPT_EULA: "Y"
      MSSQL_PID: "Express"
      SA_PASSWORD: "${MSSQL_PASSWORD}"
      MSSQL_TCP_PORT: 1433
      MSSQL_OPTIONS: "-C"  # Trust server certificate
    volumes:
      - ./database/mssql/init.sql:/db/init.sql
      - ./database/mssql/entrypoint.sh:/entrypoint.sh
      - ./database/mssql/mssql_scrypt.sql:/db/mssql_scrypt.sql
    ports:
      - "1434:1433"
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P \"$$SA_PASSWORD\" -C -Q \"SELECT 1\" || exit 1"]
      interval: 10s
      timeout: 30s  # Aumente o timeout
      start_period: 20s  # Tempo extra para inicialização
      retries: 5
    restart: unless-stopped
    entrypoint: ["/bin/bash", "/entrypoint.sh"]

  mongodb:
    image: mongo:latest
    volumes:
      - ./database/mongodb:/docker-entrypoint-initdb.d
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: "${MONGO_USER}"
      MONGO_INITDB_ROOT_PASSWORD: "${MONGO_PASSWORD}"
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    environment:
      REDIS_USER: "${REDIS_USER}"
      REDIS_PASSWORD: "${REDIS_PASSWORD}"
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}", "--loglevel", "verbose"]
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]

  # ---- Microserviços ----
  auth-service:
    build: ./microservices/auth-service
    env_file: .env
    ports:
      - "3001:3000"
    volumes:
      - ./microservices/auth-service/src:/app/src
    depends_on:
      mssql:
        condition: service_healthy
    develop:
      watch:
        - action: sync+restart
          path: ./app/src
          target: /app/src

  events-service:
    build: ./microservices/events-service
    env_file: .env
    ports:
      - "3002:3000"
    volumes:
      - ./microservices/events-service/src:/app/src
    depends_on:
      - mssql
      - redis

  chat-service:
    build: ./microservices/chat-service
    env_file: .env
    ports:
      - "3003:3000"
    volumes:
      - ./microservices/chat-service/src:/app/src
    depends_on:
      - mongodb
      - redis

  notification-service:
    build: ./microservices/notification-service
    env_file: .env
    ports:
      - "3004:3000"
    volumes:
      - ./microservices/notification-service/src:/app/src
    depends_on:
      - redis
      - kafka

  kafka:
    image: apache/kafka:latest
    hostname: broker
    container_name: kafka
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@broker:29093
      KAFKA_LISTENERS: PLAINTEXT://broker:29092,CONTROLLER://broker:29093,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LOG_DIRS: /tmp/kraft-combined-logs
      CLUSTER_ID: MkU3OEVBNTcwNTJENDM2Qk

  # ---- Frontend ----
  frontend:
    build: ./frontend
    depends_on:
      - auth-service
      - events-service

  # ---- Proxy ----
  nginx:
    build:
      context: .
      dockerfile: infra/nginx/Dockerfile
    ports:
      - "80:80"
    depends_on:
      - frontend
      - auth-service
      - events-service
      - chat-service

volumes:
  redis_data:
  mssql_data: