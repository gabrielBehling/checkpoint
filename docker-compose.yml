services:
  # ---- Bancos de Dados ----
  mssql:
    image: mcr.microsoft.com/mssql/server:2022-latest
    env_file: .env
    environment:
      ACCEPT_EULA: "Y"
      MSSQL_PID: "Express"
      SA_PASSWORD: "${DB_PASSWORD}"
      MSSQL_TCP_PORT: 1433
    volumes:
      - mssql_data:/var/opt/mssql
    ports:
      - "1433:1433"
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P \"$$SA_PASSWORD\" -Q \"SELECT 1\" || exit 1"]
      interval: 10s
      timeout: 30s  # Aumente o timeout
      start_period: 40s  # Tempo extra para inicialização
      retries: 5
    restart: unless-stopped

  mongodb:
    image: mongo:6.0
    volumes:
      - ./database/mongodb:/docker-entrypoint-initdb.d
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: "${MONGO_USER}"
      MONGO_INITDB_ROOT_PASSWORD: "${MONGO_PASSWORD}"
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]

  # ---- Microserviços ----
  auth-service:
    build: ./microservices/auth-service
    env_file: .env
    ports:
      - "3001:3000"
    depends_on:
      mssql:
        condition: service_healthy

  events-service:
    build: ./microservices/events-service
    env_file: .env
    ports:
      - "3002:3000"
    depends_on:
      - mssql
      - redis

  chat-service:
    build: ./microservices/chat-service
    env_file: .env
    ports:
      - "3003:3000"
    depends_on:
      - mongodb
      - redis

  notification-service:
    build: ./microservices/notification-service
    env_file: .env
    ports:
      - "3004:3000"
    depends_on:
      - redis
      - kafka

  kafka:
    image: bitnami/kafka:3.4
    ports:
      - "9092:9092"
    environment:
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
    depends_on:
      - zookeeper

  zookeeper:
    image: bitnami/zookeeper:3.8
    ports:
      - "2181:2181"

  # ---- Frontend ----
  frontend:
    build: ./frontend
    ports:
      - "80:3000"
    depends_on:
      - auth-service
      - events-service

  # ---- Proxy ----
  nginx:
    build:
      context: .
      dockerfile: infra/nginx/Dockerfile
    ports:
      - "443:443"
    depends_on:
      - frontend
      - auth-service
      - events-service
      - chat-service

volumes:
  redis_data:
  mssql_data: